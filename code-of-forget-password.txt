<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>


spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=anshulpatel1811@gmail.com
spring.mail.password=gluj gvvy siqx usxp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

package com.lcwd.electronic.store.services;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

@Service
public class EmailService {

    @Autowired
    private JavaMailSender mailSender;

    public void sendHtmlMail(String toEmail, String subject, String htmlBody) {
        try {
            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true, "UTF-8");

            helper.setFrom("your_email@gmail.com"); // Replace with your email
            helper.setTo(toEmail);
            helper.setSubject(subject);
            helper.setText(htmlBody, true); // true = HTML

            mailSender.send(mimeMessage);
            System.out.println("HTML Mail sent successfully!");
        } catch (MessagingException e) {
            System.out.println("Error while sending mail: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

package com.lcwd.electronic.store.controllers;

import java.util.Random;

import javax.servlet.http.HttpSession;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.lcwd.electronic.store.dtos.UserDto;
import com.lcwd.electronic.store.entities.User;
import com.lcwd.electronic.store.repositories.UserRepository;
import com.lcwd.electronic.store.services.EmailService;
import com.lcwd.electronic.store.services.UserService;

@RestController
public class ForgotController {

	@Autowired
    private UserService userService;
	
	@Autowired
    private ModelMapper mapper;
	
	@Autowired
    private UserRepository userRepository;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	@Autowired
	private EmailService emailService;
	
	@RequestMapping("/forgot")
	public String openEmailForm() {
		
		return "forgot_email_form";
	}
	
	private int finalOtp;
	private String finalEmail;
	
	@PostMapping("/send-otp")
	public String sendOTP(@RequestParam("email") String email, HttpSession session) {

	    System.out.println("Email -- " + email);

	    Random random = new Random();
	    int otp = 1000 + random.nextInt(9000); // ensures 4-digit OTP

	    System.out.println("OTP: " + otp);

	    String subject = "OTP From ElectronicStore";
	    String message = 
	        "<div style=\"font-family: Arial, sans-serif; padding: 20px; background-color: #f5f5f5;\">" +
	            "<h2 style=\"color: #333;\">ElectronicStore - Email Verification</h2>" +
	            "<p>Dear user,</p>" +
	            "<p>We received a request to verify your email address. Please use the following One-Time Password (OTP) to complete the process:</p>" +
	            "<h1 style=\"color: #007bff;\">" + otp + "</h1>" +
	            "<p>This OTP is valid for 5 minutes. Do not share it with anyone.</p>" +
	            "<br>" +
	            "<p>Regards,<br><strong>ElectronicStore Team</strong></p>" +
	        "</div>";

	    emailService.sendHtmlMail(email, subject, message);

	    // üîê Store OTP and email in session
//	    session.setAttribute("myOtp", otp);
//	    session.setAttribute("email", email);
	    
	    finalOtp=otp;
	    finalEmail=email;

	    return "forgot_email_form";
	}
	
	@PostMapping("/verify-otp")
	public String verifyOtp(@RequestParam("otp") int otp, HttpSession session) {
		
	    if (finalOtp<0) {
	        return "OTP expired or not found. Please try again.";
	    }


	    if (otp==finalOtp){
	    	
	    	UserDto user = userService.getUserByEmail(finalEmail);
	    	
	    	if(user==null) {
	    		return "User not exits with this email !!";
	    	}else {
	    		return "success";
	    	}
	    	
	    } else {
	        return "Invalid OTP!";
	    }
	}

	@PostMapping("/change-password")
	public String changePassword(@RequestParam("newpassword") String newpassword) {
		
		UserDto userDto = userService.getUserByEmail(finalEmail);
		userDto.setPassword(passwordEncoder.encode(newpassword));
		
		userRepository.save(mapper.map(userDto, User.class));
		return "success";
	}
	
	
}


.antMatchers("/send-otp")
                .permitAll()
                .antMatchers("/verify-otp")
                .permitAll()
                .antMatchers("/auth/google")
                .permitAll()
                .antMatchers("/change-password")


import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ForgetPasswordService {

  constructor(private http: HttpClient) { }

  sendOtp(email: string) {
    const params = new HttpParams().set('email', email);
    return this.http.post(`${environment.apiUrl}/send-otp`, null, { params, responseType: 'text' });
  }

  verifyOtp(otp: number): Observable<any> {
    const params = new HttpParams().set('otp', otp);
    return this.http.post(`${environment.apiUrl}/verify-otp`, null, { params, responseType: 'text' });
  }

  changePassword(newPassword: string) {
    return this.http.post(`${environment.apiUrl}/change-password`, null, {
      params: {
        newpassword: newPassword
      },
      responseType: 'text' // If your backend returns plain string like "success"
    });
  }

}


{
    path: 'reset-password',
    component: ForgetPasswordComponent,
  },
  {
    path: 'receive-otp',
    component: ReceiveOtpComponent,
  },
  {
    path: 'new-password',
    component: NewPasswordComponent,
  },


import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { ForgetPasswordService } from 'src/app/services/forget-password.service';

@Component({
  selector: 'app-forget-password',
  templateUrl: './forget-password.component.html',
  styleUrls: ['./forget-password.component.css']
})
export class ForgetPasswordComponent {

  email: string = '';

  constructor(private forgetPasswordService: ForgetPasswordService,private router: Router) {}

  onSubmit() {
    this.forgetPasswordService.sendOtp(this.email).subscribe({
      next: (response) => {
        console.log(response); // show success message
        console.log(this.email)
        alert('OTP sent to your email!');

        this.router.navigate(['/receive-otp']);
      },
      error: (err) => {
        console.error(err);
        alert('Error sending OTP!');
      }
    });
  }
}


<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <form (ngSubmit)="onSubmit()">
        <div class="mb-3">
          <label for="email" class="form-label">Email address</label>
          <input type="email" [(ngModel)]="email" name="email" class="form-control" placeholder="Enter your email" required />
        </div>
        <button type="submit" class="btn btn-primary w-100">Submit</button>
      </form>
    </div>
  </div>
</div>


import { Component } from '@angular/core';
import { ForgetPasswordService } from 'src/app/services/forget-password.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-new-password',
  templateUrl: './new-password.component.html',
  styleUrls: ['./new-password.component.css']
})
export class NewPasswordComponent {

  newPassword: string = '';

  constructor(
    private forgetPasswordService: ForgetPasswordService,
    private router: Router
  ) {}

  onSavePassword() {
    if (!this.newPassword || this.newPassword.length < 6) {
      alert("Password must be at least 6 characters long.");
      return;
    }

    this.forgetPasswordService.changePassword(this.newPassword).subscribe({
      next: (response) => {
        console.log("Password changed successfully:", response);
        alert("Password changed successfully!");
        this.router.navigate(['/login']); // Or wherever you want to go
      },
      error: (err) => {
        console.error("Error changing password:", err);
        alert("Error while updating password.");
      }
    });
  }
}


<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <form (ngSubmit)="onSavePassword()" #passwordForm="ngForm">
        <div class="mb-3">
          <label for="newPassword" class="form-label">New Password</label>
          <input
            type="password"
            id="newPassword"
            name="newPassword"
            class="form-control"
            [(ngModel)]="newPassword"
            required
            minlength="6"
            placeholder="Enter new password"
          />
        </div>
        <button type="submit" class="btn btn-primary w-100">
          Save Password
        </button>
      </form>
    </div>
  </div>
</div>


import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { ForgetPasswordService } from 'src/app/services/forget-password.service';

@Component({
  selector: 'app-receive-otp',
  templateUrl: './receive-otp.component.html',
  styleUrls: ['./receive-otp.component.css']
})
export class ReceiveOtpComponent {

  otp: number | undefined;

  constructor(
    private forgetPasswordService: ForgetPasswordService,
    private router: Router
  ) {}

  onSubmitOtp() {
    if (!this.otp) {
      alert("Please enter OTP");
      return;
    }

    this.forgetPasswordService.verifyOtp(this.otp).subscribe({
      next: (response) => {
        console.log(response);

        if (response === 'success') {
          alert("OTP verified successfully!");
          // ‚úÖ Navigate to new-password page
          this.router.navigate(['/new-password']);
        } else {
          alert(response); // Show specific error like "Invalid OTP", etc.
        }
      },
      error: (error) => {
        console.error(error);
        alert("An error occurred while verifying OTP.");
      }
    });
  }
}


<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <form (ngSubmit)="onSubmitOtp()" #otpForm="ngForm">
        <div class="mb-3">
          <label for="otp" class="form-label">Enter OTP</label>
          <input
            type="text"
            class="form-control"
            id="otp"
            name="otp"
            [(ngModel)]="otp"
            maxlength="6"
            pattern="[0-9]{4,6}"
            placeholder="Enter the 4 or 6 digit code"
            required
          />
        </div>
        <button type="submit" class="btn btn-success w-100">Verify OTP</button>
      </form>
    </div>
  </div>
</div>
